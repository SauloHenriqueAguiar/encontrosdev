name: CI-CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
      CI:
          runs-on: ubuntu-latest
          steps:
              - name: Obtendo o código do projeto
                uses: actions/checkout@v5

              - name: Setup do Python
                uses: actions/setup-python@v6
                with:
                  python-version: '3.13'

              - name: Instalação das Dependencias
                working-directory: ./src
                run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

              - name: Execução dos testes
                working-directory: ./src
                run: |
                  python -m pytest tests/ -v                 

              - name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                  username: saulohjr
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

              - name: Build and push Docker image
                uses: docker/build-push-action@v5
                with:
                  context: ./src
                  file: ./src/Dockerfile
                  push: true
                  tags: |
                    saulohjr/encontros-tech:latest
                    saulohjr/encontros-tech:v${{ github.run_number }}                 

      CD-Staging:
          runs-on: ubuntu-latest
          needs: [CI]
          environment: staging
          steps:
              - name: Obtendo o código do projeto
                uses: actions/checkout@v5

              - name: Configurar kubeconfig
                run: |
                  mkdir -p $HOME/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
                  chmod 600 $HOME/.kube/config

              - name: Criar namespace de staging
                run: kubectl create namespace tech-staging --dry-run=client -o yaml | kubectl apply -f -

              - name: Create secrets in staging
                run: |
                  kubectl create secret generic encontros-tech-db-secret \
                    --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
                    --namespace=tech-staging \
                    --dry-run=client -o yaml | kubectl apply -f -

              - name: Deploy no ambiente de staging
                uses: azure/k8s-deploy@v5
                with:
                  namespace: 'tech-staging'
                  manifests: |
                    k8s/deployment.yaml

      CD-Prod:
          runs-on: ubuntu-latest
          needs: [CD-Staging]
          environment: producao
          steps:
              - name: Obtendo o código do projeto
                uses: actions/checkout@v5

              - name: Configurar kubeconfig
                run: |
                  mkdir -p $HOME/.kube
                  echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
                  chmod 600 $HOME/.kube/config

              - name: Criar namespace de produção
                run: kubectl create namespace tech-prod --dry-run=client -o yaml | kubectl apply -f -

              - name: Create secrets in prod
                run: |
                  kubectl create secret generic encontros-tech-db-secret \
                    --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
                    --namespace=tech-prod \
                    --dry-run=client -o yaml | kubectl apply -f -

              - name: Deploy no ambiente de produção
                uses: azure/k8s-deploy@v5
                with:
                  namespace: 'tech-prod'
                  manifests: |
                    k8s/deployment.yaml
